package com.kyleu.projectile.models.typescript

import com.kyleu.projectile.models.typescript.node.SyntaxKind._
import com.kyleu.projectile.models.typescript.node.SyntaxKind

object TypeScriptTokenHelper {
  def getToken(kind: SyntaxKind) = kind match {
    case OpenBraceToken => "{"
    case CloseBraceToken => "}"
    case OpenParenToken => "("
    case CloseParenToken => ")"
    case OpenBracketToken => "["
    case CloseBracketToken => "]"
    case DotToken => "."
    case DotDotDotToken => "..."
    case SemicolonToken => ";"
    case CommaToken => ","
    case LessThanToken => "<"
    case LessThanSlashToken => "</"
    case GreaterThanToken => ">"
    case LessThanEqualsToken => "<="
    case GreaterThanEqualsToken => ">="
    case EqualsEqualsToken => "=="
    case ExclamationEqualsToken => "!="
    case EqualsEqualsEqualsToken => "==="
    case ExclamationEqualsEqualsToken => "!=="
    case EqualsGreaterThanToken => "=>"
    case PlusToken => "+"
    case MinusToken => "-"
    case AsteriskToken => "*"
    case AsteriskAsteriskToken => "**"
    case SlashToken => "/"
    case PercentToken => "%"
    case PlusPlusToken => "++"
    case MinusMinusToken => "--"
    case LessThanLessThanToken => "<<"
    case GreaterThanGreaterThanToken => ">>"
    case GreaterThanGreaterThanGreaterThanToken => ">>>"
    case AmpersandToken => "&"
    case BarToken => "|"
    case CaretToken => "^"
    case ExclamationToken => "!"
    case TildeToken => "^"
    case AmpersandAmpersandToken => "&&"
    case BarBarToken => "||"
    case QuestionToken => "?"
    case ColonToken => ":"
    case AtToken => "@"
    case EqualsToken => "="
    case PlusEqualsToken => "+="
    case MinusEqualsToken => "-="
    case AsteriskEqualsToken => "*="
    case AsteriskAsteriskEqualsToken => "**="
    case SlashEqualsToken => "/="
    case PercentEqualsToken => "%="
    case LessThanLessThanEqualsToken => "<<="
    case GreaterThanGreaterThanEqualsToken => ">>="
    case GreaterThanGreaterThanGreaterThanEqualsToken => ">>>="
    case AmpersandEqualsToken => "&="
    case BarEqualsToken => "|="
    case CaretEqualsToken => "^="
  }
}
