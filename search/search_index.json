{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Projectile"},{"location":"/index.html#projectile","text":"Projectile creates beautiful Scala code from your Postgres database, GraphQL queries, or Thrift definitions.\nhttps://kyleu.com/projectile\nhttps://github.com/KyleU/projectile","title":"Projectile"},{"location":"/index.html#code-generation","text":"","title":"Code Generation"},{"location":"/index.html#postgres-database","text":"For each table and view, Projectile can generate:\nCase classes with Circe JSON serialization using Scala representations of all database types (including Enumeratum enums) Strongly-typed database queries for all CRUD operations and indexed queries, along with an asynchronous service interface Slick or Doobie bindings, supporting all Postgres types and pre-built common queries A full-featured Sangria GraphQL interface, supporting batched relationship traversal and a lovely IDE and Schema visualizer Play framework controllers and views exposing an Openapi/Swagger endpoint and a beautiful admin interface supporting local or OAuth login","title":"Postgres Database"},{"location":"/index.html#thrift-idl","text":"Projectile monitors your Thrift IDL, and works with Scrooge to create wrapper classes that support serialization, tracing, and Scala Futures","title":"Thrift IDL"},{"location":"/index.html#graphql-queries","text":"Projectile monitors your GraphQL schema and queries, and generates Scala case classes with input and result serialization","title":"GraphQL Queries"},{"location":"/index.html#license","text":"The code is licensed under CC0-1.0\nYou can basically do whatever you want with the code, no attribution required. Make it your own!","title":"License"},{"location":"/gettingStarted.html","text":"","title":"Getting Started"},{"location":"/gettingStarted.html#getting-started","text":"There are several ways to run Projectile:","title":"Getting Started"},{"location":"/gettingStarted.html#release-jar","text":"Download the leatest release from GitHub. Only a single file, projectile.jar, is needed From your project’s directory, run java -jar projectile.jar, this will print CLI usage To run the web server, run java -jar projectile.jar server","title":"Release Jar"},{"location":"/gettingStarted.html#shell-script","text":"Save this file as projectile.sh and mark it executable. Once executed, it will download and run the latest release from GitHub","title":"Shell script"},{"location":"/gettingStarted.html#ammonite","text":"Save this file as projectile.sc. Run with amm projectile.sc and it will download the dependencies","title":"Ammonite"},{"location":"/gettingStarted.html#sbt-plugin","text":"An SBT plugin (details here) is provided for running Projectile from within your project’s SBT session","title":"SBT Plugin"},{"location":"/gettingStarted.html#run-from-source","text":"Clone Projectile\n$ cd projectile\n$ sbt\n> run\n$ open http://127.0.0.1:20000\nThe project is built on Scala and SBT, and can be opened by IntelliJ directly","title":"Run From Source"},{"location":"/tutorial/index.html","text":"","title":"Tutorials"},{"location":"/tutorial/index.html#tutorials","text":"The tutorials exist to help you understand and use Projectile effectively. The first tutorial creates a web app that provides real-time agile estimate poker sessions and an administration site.\nEstimate Poker Demo Site Overview First Steps Database Setup Adding Projectile","title":"Tutorials"},{"location":"/tutorial/poker/index.html","text":"","title":"Estimate Poker"},{"location":"/tutorial/poker/index.html#estimate-poker","text":"The Estimate Poker tutorial will start with a small Scala application, add Projectile, and export more and more features, finally producing a web application with:\nWebsocket transport of shared Scala classes for real-time client updates Play Framework admin site with UI for data access, search, and mutations Full GraphQL API, with a schema visualizer and query IDE Code generated services to reduce CRUD boilerplate","title":"Estimate Poker"},{"location":"/tutorial/poker/index.html#demo-site","text":"You can see the end result of this tutorial at https://estimate.poker","title":"Demo Site"},{"location":"/tutorial/poker/index.html#overview","text":"First Steps will help you clone and build an initial Scala sbt project Database Setup will guide you though configuring a new postgres database Adding Projectile will use Projectile to create our first generated classes","title":"Overview"},{"location":"/tutorial/poker/01_first-steps.html","text":"","title":"First Steps"},{"location":"/tutorial/poker/01_first-steps.html#first-steps","text":"This tutorial will lead you through creating a real-time web application that facilitates planning poker sessions.\nThe basic idea is to create a PostgreSQL database, use that to have Projectile generate some code, and then repeat as we add features.\nWith luck, we’ll end up with a useful web application, identical to the version available here","title":"First Steps"},{"location":"/tutorial/poker/01_first-steps.html#clone-the-repo","text":"Projectile goes to great lengths to minimize the amount of boilerplate you need to provide in your codebase, but there’s still a fair bit of ceremony involved in starting a new sbt project. To save us both some typing, go ahead and clone the repository for this tutorial\ngit clone --branch tutorial-1 https://github.com/KyleU/estimate.poker.git","title":"Clone the repo"},{"location":"/tutorial/poker/01_first-steps.html#explore-the-project","text":"There’s only a few files in the project, so let’s take a look at them:","title":"Explore the project"},{"location":"/tutorial/poker/01_first-steps.html#project-","text":"Adds the Projectile sbt plugin, which runs on compile to update any generated code\naddSbtPlugin(\"com.kyleu\" % \"projectile-sbt\" % \"1.3.0\")","title":"project/plugins.sbt"},{"location":"/tutorial/poker/01_first-steps.html#","text":"Adds the Projectile scala library as a dependency, for common utilities and helper classes\nlibraryDependencies += \"com.kyleu\" %% \"projectile-lib-scala\" % \"1.3.0\"\nAdds the projectile plugin to the project\nenablePlugins(SbtProjectile)\nThe rest of the files are common sbt boilerplate, setting the correct sbt and Java version, and adding a .gitignore","title":"build.sbt"},{"location":"/tutorial/poker/01_first-steps.html#run-the-project","text":"From the directory you cloned the project to, run sbt (you’ll need sbt installed, obviously). From the interactive command prompt, you can run tasks like compile and publish.\nIf you run the project, Entrypoint will be called, which print’s the obligatory “Hello World”.\nThere’s not much to be impressed by yet, so let’s move on!","title":"Run the project"},{"location":"/tutorial/poker/02_database-setup.html","text":"","title":"Database Setup"},{"location":"/tutorial/poker/02_database-setup.html#database-setup","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker, and have completed the previous tutorial step\nNow that we have a basic project configured, let’s add a database schema for Projectile to use for code generation.\nGo ahead and checkout the tutorial-2 tag by running git checkout -b tutorial-2. This adds four files in ./ddl:\ncreate-db.ddl.sql, containing statements to create the database and user schema.sql, describing all of the tables and types needed in the database seed-data.sql, inserting initial test data, so we have something to look at drop.ddl.sql, which, when run, removes everything created by schema.sql\nUsing a tool like psql or Database Flow, run create-db.ddl.sql, or manually create an empty database named estimate. Then, run schema.sql to create the database structure, and seed-data.sql to create the initital data.\nConnect to your database, and run select * from session. If at least one row comes back, you’re in business.\nNow it’s time to configure Projectile, giving it the configuration it needs to generate some code, so get going!","title":"Database Setup"},{"location":"/tutorial/poker/03_adding-projectile.html","text":"","title":"Adding Projectile"},{"location":"/tutorial/poker/03_adding-projectile.html#adding-projectile","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker, checked out tag tutorial-2, and have created a database as described in the previous tutorial step\nNow that we have a working project, let’s get Projectile configured so we can start generating code.\nThere’s a semi-functional command-line interface, but it’s poorly documented, so we’ll use the UI provided by Projectile.","title":"Adding Projectile"},{"location":"/codegen/index.html","text":"","title":"Code Generation"},{"location":"/codegen/index.html#code-generation","text":"API Documentation","title":"Code Generation"},{"location":"/codegen/index.html#","text":"For PostgreSQL databases, Projectile can manage a full admin web application, Slick and Doobie queries, GraphQL and OpenAPI endpoints, and more.","title":"Database Export"},{"location":"/codegen/index.html#","text":"For Thrift APIs, Projectile can extend Scrooge-generated Scala code to provide case classes with Json serialization, services that use Scala Futures, and native scalars.","title":"Thrift Export"},{"location":"/codegen/index.html#","text":"For a GraphQL schema and a set of queries, Projectile can create strongly-typed Scala representations of your models and services, and helper methods to call a running api.","title":"GraphQL Export"},{"location":"/codegen/index.html#","text":"An SBT plugin is provided that updates your generated code on compilation.","title":"SBT Plugin"},{"location":"/codegen/database.html","text":"","title":"Database"},{"location":"/codegen/database.html#database","text":"Projectile reads the details of your PostgreSQL database, and generates Scala code intended to be used alongside the Projectile libraries. It creates only what you ask for, from basic case classes to a full admin site with GraphQL.","title":"Database"},{"location":"/codegen/thrift.html","text":"","title":"Thrift"},{"location":"/codegen/thrift.html#thrift","text":"Projectile monitors your Thrift IDL, and works with Scrooge to create wrapper classes that support serialization, tracing, and Scala Futures. This is the newest piece of this project, so it’s a work in progress.\nDocs soon!","title":"Thrift"},{"location":"/codegen/graphql.html","text":"","title":"GraphQL"},{"location":"/codegen/graphql.html#graphql","text":"Projectile monitors your GraphQL schema and queries, and generates Scala case classes with input and result serialization. It’s cooler than I’m making it sound.\nDocs soon!","title":"GraphQL"},{"location":"/codegen/sbt-plugin.html","text":"","title":"SBT Plugin"},{"location":"/codegen/sbt-plugin.html#sbt-plugin","text":"Add the following to your plugins.sbt:\naddSbtPlugin(\"com.kyleu\" % \"projectile-sbt\" % \"1.3.0\")\nNow, projectile will run each time you compile your project (don’t worry, it only adds a few milliseconds)","title":"SBT Plugin"},{"location":"/libraries/index.html","text":"","title":"Scala Libraries"},{"location":"/libraries/index.html#scala-libraries","text":"Projectile generates Scala code that expects helper classes to be available.\nYou can provide your own, or use the Projectile libraries. You almost certainly won’t need them all, but documentation on the provided classes is available here.\nCore Scala Tracing JDBC Slick Doobie Thrift GraphQL Service Scala.js Play Websocket Auth AuthGraphQL","title":"Scala Libraries"},{"location":"/libraries/core.html","text":"","title":"Core"},{"location":"/libraries/core.html#core","text":"Classes and utilities shared between Scala and Scala.js (API Documentation)","title":"Core"},{"location":"/libraries/core.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-core\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-core_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-core_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/core.html#classes","text":"","title":"Classes"},{"location":"/libraries/core.html#","text":"Wrapper case class used for search results","title":"BaseResult"},{"location":"/libraries/core.html#","text":"A simple key and value case class, used where unordered maps aren’t appropriate","title":"Tag"},{"location":"/libraries/core.html#","text":"Provides ordering, formatting, and common utilities for Local and Zoned java.time date classes","title":"DateUtils"},{"location":"/libraries/core.html#","text":"Provides all the imports and utility methods you need to work with Circe using dates, uuids, enums and sealed traits","title":"JsonSerializers"},{"location":"/libraries/core.html#","text":"Rather than use null references in your code, NullUtils is provided for common operations and values involving nulls","title":"NullUtils"},{"location":"/libraries/core.html#","text":"Currently only provides a cross-platform method for formatting numbers","title":"NumberUtils"},{"location":"/libraries/core.html#","text":"Exposes a method to split a string to an ordered sequence of lines","title":"StringUtils"},{"location":"/libraries/core.html#","text":"Utility methods to transform a java.util.UUID to and from a sequence of bytes","title":"UuidUtils"},{"location":"/libraries/scala.html","text":"","title":"Scala"},{"location":"/libraries/scala.html#scala","text":"Common classes relating to core models and utilities (API Documentation)","title":"Scala"},{"location":"/libraries/scala.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-scala\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-scala_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-scala_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/scala.html#classes","text":"","title":"Classes"},{"location":"/libraries/scala.html#","text":"Uses a user-provided secret to encrypt and decrypt arbitrary bytes and strings using AES/ECB/PKCS5Padding","title":"EncryptionUtils"},{"location":"/libraries/scala.html#","text":"A JSON parser that supports comments and included external files","title":"JsonIncludeParser"},{"location":"/libraries/scala.html#","text":"Provides a logging interface that accepts TraceData in its methods and includes the trace ids in its output","title":"Logging"},{"location":"/libraries/scala.html#","text":"Used everywhere, TraceData is a common trait that exposes authentication and tracing information for OpenTracing services","title":"TraceData"},{"location":"/libraries/scala.html#","text":"Provides tracing helpers and methods to wrap access to OpenTracing","title":"TracingService"},{"location":"/libraries/tracing.html","text":"","title":"Tracing"},{"location":"/libraries/tracing.html#tracing","text":"Helper classes for OpenTracing and Micrometer (API Documentation)","title":"Tracing"},{"location":"/libraries/tracing.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-tracing\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-tracing_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-tracing_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/tracing.html#classes","text":"","title":"Classes"},{"location":"/libraries/tracing.html#","text":"Helper class to initialize Prometheus, Datadog, or StatsD metrics reporting","title":"Instrumented"},{"location":"/libraries/tracing.html#","text":"Case class containing all of the information needed to report metrics. Usually created from a config file.","title":"MetricsConfig"},{"location":"/libraries/tracing.html#","text":"Implements TracingService to provide system-wide tracing support","title":"OpenTracingService"},{"location":"/libraries/tracing.html#","text":"Extends TraceData with OpenTracing-specific functionality","title":"TraceDataOpenTracing"},{"location":"/libraries/jdbc.html","text":"","title":"JDBC"},{"location":"/libraries/jdbc.html#jdbc","text":"Imports and models for jdbc database connections (API Documentation)","title":"JDBC"},{"location":"/libraries/jdbc.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-jdbc\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-jdbc_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-jdbc_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/jdbc.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/slick.html","text":"","title":"Slick"},{"location":"/libraries/slick.html#slick","text":"Access routines for Slick databindings (API Documentation)","title":"Slick"},{"location":"/libraries/slick.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-slick\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-slick_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-slick_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/slick.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/doobie.html","text":"","title":"Doobie"},{"location":"/libraries/doobie.html#doobie","text":"Supporting classes for Doobie queries (API Documentation)","title":"Doobie"},{"location":"/libraries/doobie.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-doobie\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-doobie_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-doobie_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/doobie.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/thrift.html","text":"","title":"Thrift"},{"location":"/libraries/thrift.html#thrift","text":"Thrift service helpers, such as future conversions (API Documentation)","title":"Thrift"},{"location":"/libraries/thrift.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-thrift\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-thrift_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-thrift_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/thrift.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/graphql.html","text":"","title":"GraphQL"},{"location":"/libraries/graphql.html#graphql","text":"GraphQL utilities and helpers (API Documentation)","title":"GraphQL"},{"location":"/libraries/graphql.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-graphql\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-graphql_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-graphql_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/graphql.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/service.html","text":"","title":"Service"},{"location":"/libraries/service.html#service","text":"Supports service classes with various helpers (API Documentation)","title":"Service"},{"location":"/libraries/service.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-service\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-service_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-service_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/service.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/scalajs.html","text":"","title":"Scala.js"},{"location":"/libraries/scalajs.html#scala-js","text":"Scala.js helpers (API Documentation)","title":"Scala.js"},{"location":"/libraries/scalajs.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-scalajs\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-scalajs_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-scalajs_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/scalajs.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/play.html","text":"","title":"Play"},{"location":"/libraries/play.html#play","text":"Helpers for traced Play Framework controllers and views (API Documentation)","title":"Play"},{"location":"/libraries/play.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-play\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-play_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-play_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/play.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/websocket.html","text":"","title":"Websocket"},{"location":"/libraries/websocket.html#websocket","text":"Websocket controller and admin actions for actor-backed websocket connections (API Documentation)","title":"Websocket"},{"location":"/libraries/websocket.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-websocket\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-websocket_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-websocket_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/websocket.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/auth.html","text":"","title":"Auth"},{"location":"/libraries/auth.html#auth","text":"Classes to support Play Framework apps with authentication (API Documentation)","title":"Auth"},{"location":"/libraries/auth.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-auth\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-auth_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-auth_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/auth.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/auth-graphql.html","text":"","title":"AuthGraphQL"},{"location":"/libraries/auth-graphql.html#authgraphql","text":"Secure GraphQL controllers and views, including GraphiQL and GraphQL Voyager (API Documentation)","title":"AuthGraphQL"},{"location":"/libraries/auth-graphql.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-auth-graphql\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-auth-graphql_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-auth-graphql_2.12', version: '1.3.0'\n}","title":"Usage"},{"location":"/libraries/auth-graphql.html#classes","text":"TODO","title":"Classes"},{"location":"/technology.html","text":"","title":"Technology"},{"location":"/technology.html#technology","text":"Projectile relies on a whole lot of tremendous open source projects. Here’s a few of them.\nScala Play Framework Akka Sangria Materialize CSS Enumeratum circe Font Awesome JQuery Slick Doobie OpenAPI","title":"Technology"},{"location":"/troubleshooting.html","text":"","title":"Troubleshooting"},{"location":"/troubleshooting.html#troubleshooting","text":"For now, hit GitHub Issues, we’re eager to help!","title":"Troubleshooting"}]}