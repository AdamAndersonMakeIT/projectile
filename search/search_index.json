{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/troubleshooting.html","text":"","title":"Troubleshooting"},{"location":"/troubleshooting.html#troubleshooting","text":"For now, hit GitHub Issues, we’re eager to help!","title":"Troubleshooting"},{"location":"/index.html","text":"","title":"Projectile"},{"location":"/index.html#projectile","text":"Projectile creates beautiful Scala code from your Postgres database, GraphQL queries, TypeScript definitions, or Thrift IDL.\nhttps://kyleu.com/projectile\nhttps://github.com/KyleU/projectile","title":"Projectile"},{"location":"/index.html#","text":"","title":"Code Generation"},{"location":"/index.html#","text":"For each table and view, Projectile can generate:\nCase classes with Circe JSON serialization using Scala representations of all database types (including Enumeratum enums) Strongly-typed database queries for all CRUD operations and indexed queries, along with an asynchronous service interface Slick or Doobie bindings, supporting all Postgres types and pre-built common queries A full-featured Sangria GraphQL interface, supporting batched relationship traversal and a lovely IDE and Schema visualizer Play framework controllers and views exposing an Openapi/Swagger endpoint and a beautiful admin interface supporting local or OAuth login","title":"Postgres Database"},{"location":"/index.html#","text":"Projectile can turn yout definition file into a well-designed Scala.js facade project. This is a work in progress, it’s not quite ready","title":"TypeScript Definitions"},{"location":"/index.html#","text":"Projectile monitors your GraphQL schema and queries, and generates Scala case classes with input and result serialization","title":"GraphQL Queries"},{"location":"/index.html#","text":"Projectile monitors your Thrift IDL and works with Scrooge to create wrapper classes that support serialization, tracing, and Scala Futures","title":"Thrift IDL"},{"location":"/index.html#license","text":"The code is licensed under CC0-1.0\nYou can basically do whatever you want with the code, no attribution required. Make it your own!","title":"License"},{"location":"/gettingStarted/index.html","text":"","title":"Getting Started"},{"location":"/gettingStarted/index.html#getting-started","text":"Projectile runs in your project’s directory, creating generated source code based on your database, Thrift, or GraphQL APIs.\nInstalling Projectile Creating a Project","title":"Getting Started"},{"location":"/gettingStarted/installing.html","text":"","title":"Installing Projectile"},{"location":"/gettingStarted/installing.html#installing-projectile","text":"You’ve got a few options for acquiring Projectile. Most folks use the shell script, but other methods are available. If you’re looking to extend or contribute to Projectile, run it from source.","title":"Installing Projectile"},{"location":"/gettingStarted/installing.html#option-1-shell-script","text":"Save this file as projectile.sh and mark it executable. Once executed, it will download and run the latest release from GitHub, printing usage instructions by default. Run projectile.sh server to start the server","title":"Option 1: Shell script"},{"location":"/gettingStarted/installing.html#option-2-release-jar","text":"Download the latest release from GitHub. Only a single file, projectile.jar, is needed From your project’s directory, run java -jar projectile.jar, this will print CLI usage To run the web server, run java -jar projectile.jar server","title":"Option 2: Release jar"},{"location":"/gettingStarted/installing.html#option-3-ammonite","text":"Save this file as projectile.sc. Run with amm projectile.sc and it will download the dependencies and print usage instructions. Run amm projectile.sc server to start the server","title":"Option 3: Ammonite"},{"location":"/gettingStarted/installing.html#option-4-sbt-plugin","text":"An SBT plugin (details here) is provided for running Projectile from within your project’s SBT session. Because of SBT plugin restrictions, the web server is unavailable, though command-line usage is supported. You can use one of the other methods to launch the server and use a UI to configure your project","title":"Option 4: SBT plugin"},{"location":"/gettingStarted/installing.html#option-5-run-from-source","text":"Clone Projectile\n$ cd projectile\n$ sbt\n> run\n$ open http://127.0.0.1:20000\nThe project is built on Scala and SBT, and can be opened by IntelliJ directly","title":"Option 5: Run from source"},{"location":"/gettingStarted/project.html","text":"","title":"Creating a Project"},{"location":"/gettingStarted/project.html#creating-a-project","text":"Using one of the methods described in Installing Projectile, launch the projectile server, and open http://localhost:20000","title":"Creating a Project"},{"location":"/gettingStarted/project.html#creating-the-input","text":"Before we create our project, we need to make an input pointing to your database, Thrift IDL, or GraphQL schema and queries.\nEither click the “Add Input” link on the home page, or open http://localhost:20000/input directly.\n##","title":"Creating the input"},{"location":"/codegen/index.html","text":"","title":"Code Generation"},{"location":"/codegen/index.html#code-generation","text":"API Documentation","title":"Code Generation"},{"location":"/codegen/index.html#","text":"For PostgreSQL databases, Projectile can generate a full admin web application, Slick and Doobie bindings, GraphQL and OpenAPI endpoints, and more.","title":"Database Export"},{"location":"/codegen/index.html#","text":"For Thrift APIs, Projectile can extend Scrooge-generated Scala code to provide case classes with Json serialization, services that use Scala Futures, and native scalars.","title":"Thrift Export"},{"location":"/codegen/index.html#","text":"For a GraphQL schema and a set of queries, Projectile can create strongly-typed Scala representations of your models and services, and helper methods to call a running api.","title":"GraphQL Export"},{"location":"/codegen/index.html#","text":"Projectile parses TypeScript definitions and creates a Scala.js facade project","title":"TypeScript"},{"location":"/codegen/index.html#","text":"An (optional) SBT plugin is provided that updates your generated code on compilation.","title":"SBT Plugin"},{"location":"/codegen/database.html","text":"","title":"Database"},{"location":"/codegen/database.html#database","text":"Projectile reads the details of your PostgreSQL database, and generates Scala code intended to be used alongside the Projectile libraries. It creates only what you ask for, from basic case classes to a full admin site with GraphQL.\nIf you’ve already installed Projectile, started the server, and created your project, you can edit the installed features, export your project, and end up with a pleasantly-designed Scala application.\nTutorial\nAPI Documentation","title":"Database"},{"location":"/codegen/database.html#features","text":"Core Enumeratum enums Scala case classes Search results model Json serialization DataModel support Service JDBC queries Asynchronous service Slick Slick column types Slick tables Doobie Doobie enum bindings Doobie model bindings Scalatest unit tests GraphQL Sangria enum schemata Sangria model schemata Example GraphQL queries Controller Play Framework controller Play routes files Twirl templates Thrift Thrift IDL files OpenAPI Swagger/OpenAPI endpoints Wiki Github project wiki","title":"Features"},{"location":"/codegen/features/db/core.html","text":"","title":"Core"},{"location":"/codegen/features/db/core.html#core","text":"","title":"Core"},{"location":"/codegen/features/db/core.html#enumeratum-enums","text":"TODO\nExample","title":"Enumeratum enums"},{"location":"/codegen/features/db/core.html#scala-case-classes","text":"TODO\nExample","title":"Scala case classes"},{"location":"/codegen/features/db/core.html#search-results-model","text":"TODO\nExample","title":"Search results model"},{"location":"/codegen/features/db/core.html#json-serialization","text":"TODO","title":"Json serialization"},{"location":"/codegen/features/db/core.html#datamodel-support","text":"TODO","title":"DataModel support"},{"location":"/codegen/features/db/service.html","text":"","title":"Service"},{"location":"/codegen/features/db/service.html#service","text":"","title":"Service"},{"location":"/codegen/features/db/service.html#jdbc-queries","text":"TODO\nExample","title":"JDBC queries"},{"location":"/codegen/features/db/service.html#asynchronous-service","text":"TODO\nExample","title":"Asynchronous service"},{"location":"/codegen/features/db/slick.html","text":"","title":"Slick"},{"location":"/codegen/features/db/slick.html#slick","text":"","title":"Slick"},{"location":"/codegen/features/db/slick.html#slick-column-types","text":"TODO\nExample","title":"Slick column types"},{"location":"/codegen/features/db/slick.html#slick-tables","text":"TODO\nExample","title":"Slick tables"},{"location":"/codegen/features/db/doobie.html","text":"","title":"Doobie"},{"location":"/codegen/features/db/doobie.html#doobie","text":"","title":"Doobie"},{"location":"/codegen/features/db/doobie.html#doobie-enum-bindings","text":"TODO\nExample","title":"Doobie enum bindings"},{"location":"/codegen/features/db/doobie.html#doobie-model-bindings","text":"TODO\nExample","title":"Doobie model bindings"},{"location":"/codegen/features/db/doobie.html#scalatest-unit-tests","text":"TODO","title":"Scalatest unit tests"},{"location":"/codegen/features/db/graphql.html","text":"","title":"GraphQL"},{"location":"/codegen/features/db/graphql.html#graphql","text":"","title":"GraphQL"},{"location":"/codegen/features/db/graphql.html#sangria-enum-schemata","text":"TODO\nExample","title":"Sangria enum schemata"},{"location":"/codegen/features/db/graphql.html#sangria-model-schemata","text":"TODO\nExample","title":"Sangria model schemata"},{"location":"/codegen/features/db/graphql.html#example-graphql-queries","text":"TODO\nExample","title":"Example GraphQL queries"},{"location":"/codegen/features/db/controller.html","text":"","title":"Controller"},{"location":"/codegen/features/db/controller.html#controller","text":"","title":"Controller"},{"location":"/codegen/features/db/controller.html#play-framework-controller","text":"TODO\nExample","title":"Play Framework controller"},{"location":"/codegen/features/db/controller.html#play-routes-files","text":"TODO\nExample","title":"Play routes files"},{"location":"/codegen/features/db/controller.html#twirl-templates","text":"TODO\nExamples","title":"Twirl templates"},{"location":"/codegen/features/db/thrift.html","text":"","title":"Thrift"},{"location":"/codegen/features/db/thrift.html#thrift","text":"","title":"Thrift"},{"location":"/codegen/features/db/thrift.html#thrift-idl-files","text":"TODO\nExample","title":"Thrift IDL files"},{"location":"/codegen/features/db/openapi.html","text":"","title":"OpenAPI"},{"location":"/codegen/features/db/openapi.html#openapi","text":"","title":"OpenAPI"},{"location":"/codegen/features/db/openapi.html#swagger-openapi-endpoints","text":"TODO\nExample","title":"Swagger/OpenAPI endpoints"},{"location":"/codegen/features/db/wiki.html","text":"","title":"Wiki"},{"location":"/codegen/features/db/wiki.html#wiki","text":"","title":"Wiki"},{"location":"/codegen/features/db/wiki.html#github-project-wiki","text":"TODO\nExample","title":"Github project wiki"},{"location":"/codegen/thrift.html","text":"","title":"Thrift"},{"location":"/codegen/thrift.html#thrift","text":"Projectile monitors your Thrift IDL, and works with Scrooge to create wrapper classes that support serialization, tracing, and Scala Futures. This is the newest piece of this project, so it’s a work in progress.\nTutorial\nAPI Documentation\nMore info soon!","title":"Thrift"},{"location":"/codegen/graphql.html","text":"","title":"GraphQL"},{"location":"/codegen/graphql.html#graphql","text":"Projectile monitors your GraphQL schema and queries, and generates Scala case classes with input and result serialization. It’s cooler than I’m making it sound.\nTutorial\nAPI Documentation\nMore info soon!","title":"GraphQL"},{"location":"/codegen/typescript.html","text":"","title":"TypeScript"},{"location":"/codegen/typescript.html#typescript","text":"Projectile parses TypeScript definitions and creates a Scala.js facade project\nTutorial\nAPI Documentation\nMore info soon!","title":"TypeScript"},{"location":"/codegen/sbt-plugin.html","text":"","title":"SBT Plugin"},{"location":"/codegen/sbt-plugin.html#sbt-plugin","text":"Projectile provides a (completely optional) sbt plugin\nTo enable it, add the following to your plugins.sbt:\naddSbtPlugin(\"com.kyleu\" % \"projectile-sbt\" % \"1.7.0\")\nThen add it to your project’s build definition:\nenablePlugins(SbtProjectile)\nNow, projectile will run each time you compile your project (don’t worry, it only adds a few milliseconds). You can also use the CLI by running the sbt task projectile\nAPI Documentation","title":"SBT Plugin"},{"location":"/libraries/index.html","text":"","title":"Scala Libraries"},{"location":"/libraries/index.html#scala-libraries","text":"Projectile generates Scala code that expects helper classes to be available.\nYou can provide your own, or use the Projectile libraries. You almost certainly won’t need them all, but documentation on the provided classes is available here.\nCore Scala Tracing JDBC Slick Doobie Thrift GraphQL Service Scala.js Play Websocket Auth Auth/GraphQL","title":"Scala Libraries"},{"location":"/libraries/core.html","text":"","title":"Core"},{"location":"/libraries/core.html#core","text":"Classes and utilities shared between Scala and Scala.js (API Documentation)","title":"Core"},{"location":"/libraries/core.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-core\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-core_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-core_2.12', version: '1.7.0'\n}\n(Or, use “%%%” for Scala.js and cross-built projects)","title":"Usage"},{"location":"/libraries/core.html#classes","text":"","title":"Classes"},{"location":"/libraries/core.html#","text":"Wrapper case class used for search results","title":"BaseResult"},{"location":"/libraries/core.html#","text":"A simple key and value case class, used where unordered maps aren’t appropriate","title":"Tag"},{"location":"/libraries/core.html#","text":"Provides ordering, formatting, and common utilities for Local and Zoned java.time date classes","title":"DateUtils"},{"location":"/libraries/core.html#","text":"Provides all the imports and utility methods you need to work with Circe using dates, uuids, enums and sealed traits","title":"JsonSerializers"},{"location":"/libraries/core.html#","text":"Rather than use null references in your code, NullUtils is provided for common operations and values involving nulls","title":"NullUtils"},{"location":"/libraries/core.html#","text":"Currently only provides a cross-platform method for formatting numbers","title":"NumberUtils"},{"location":"/libraries/core.html#","text":"Exposes a method to split a string to an ordered sequence of lines","title":"StringUtils"},{"location":"/libraries/core.html#","text":"Utility methods to transform a java.util.UUID to and from a sequence of bytes","title":"UuidUtils"},{"location":"/libraries/scala.html","text":"","title":"Scala"},{"location":"/libraries/scala.html#scala","text":"Common classes relating to core models and utilities (API Documentation)","title":"Scala"},{"location":"/libraries/scala.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-scala\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-scala_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-scala_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/scala.html#classes","text":"","title":"Classes"},{"location":"/libraries/scala.html#","text":"Uses a user-provided secret to encrypt and decrypt arbitrary bytes and strings using AES/ECB/PKCS5Padding","title":"EncryptionUtils"},{"location":"/libraries/scala.html#","text":"A JSON parser that supports comments and included external files","title":"JsonIncludeParser"},{"location":"/libraries/scala.html#","text":"Provides a logging interface that accepts TraceData in its methods and includes the trace ids in its output","title":"Logging"},{"location":"/libraries/scala.html#","text":"Used everywhere, TraceData is a common trait that exposes authentication and tracing information for OpenTracing services","title":"TraceData"},{"location":"/libraries/scala.html#","text":"Provides tracing helpers and methods to wrap access to OpenTracing","title":"TracingService"},{"location":"/libraries/tracing.html","text":"","title":"Tracing"},{"location":"/libraries/tracing.html#tracing","text":"Helper classes for OpenTracing and Micrometer (API Documentation)","title":"Tracing"},{"location":"/libraries/tracing.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-tracing\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-tracing_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-tracing_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/tracing.html#classes","text":"","title":"Classes"},{"location":"/libraries/tracing.html#","text":"Helper class to initialize Prometheus, Datadog, or StatsD metrics reporting","title":"Instrumented"},{"location":"/libraries/tracing.html#","text":"Case class containing all of the information needed to report metrics. Usually created from a config file.","title":"MetricsConfig"},{"location":"/libraries/tracing.html#","text":"Implements TracingService to provide system-wide tracing support","title":"OpenTracingService"},{"location":"/libraries/tracing.html#","text":"Extends TraceData with OpenTracing-specific functionality","title":"TraceDataOpenTracing"},{"location":"/libraries/jdbc.html","text":"","title":"JDBC"},{"location":"/libraries/jdbc.html#jdbc","text":"Imports and models for jdbc database connections (API Documentation)","title":"JDBC"},{"location":"/libraries/jdbc.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-jdbc\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-jdbc_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-jdbc_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/jdbc.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/slick.html","text":"","title":"Slick"},{"location":"/libraries/slick.html#slick","text":"Access routines for Slick databindings (API Documentation)","title":"Slick"},{"location":"/libraries/slick.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-slick\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-slick_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-slick_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/slick.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/doobie.html","text":"","title":"Doobie"},{"location":"/libraries/doobie.html#doobie","text":"Supporting classes for Doobie queries (API Documentation)","title":"Doobie"},{"location":"/libraries/doobie.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-doobie\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-doobie_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-doobie_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/doobie.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/thrift.html","text":"","title":"Thrift"},{"location":"/libraries/thrift.html#thrift","text":"Thrift service helpers, such as future conversions (API Documentation)","title":"Thrift"},{"location":"/libraries/thrift.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-thrift\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-thrift_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-thrift_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/thrift.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/graphql.html","text":"","title":"GraphQL"},{"location":"/libraries/graphql.html#graphql","text":"GraphQL utilities and helpers (API Documentation)","title":"GraphQL"},{"location":"/libraries/graphql.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-graphql\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-graphql_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-graphql_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/graphql.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/service.html","text":"","title":"Service"},{"location":"/libraries/service.html#service","text":"Supports service classes with various helpers (API Documentation)","title":"Service"},{"location":"/libraries/service.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-service\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-service_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-service_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/service.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/scalajs.html","text":"","title":"Scala.js"},{"location":"/libraries/scalajs.html#scala-js","text":"Scala.js helpers (API Documentation)","title":"Scala.js"},{"location":"/libraries/scalajs.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-scalajs\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-scalajs_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-scalajs_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/scalajs.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/play.html","text":"","title":"Play"},{"location":"/libraries/play.html#play","text":"Helpers for traced Play Framework controllers and views (API Documentation)","title":"Play"},{"location":"/libraries/play.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-play\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-play_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-play_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/play.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/websocket.html","text":"","title":"Websocket"},{"location":"/libraries/websocket.html#websocket","text":"Websocket controller and admin actions for actor-backed websocket connections (API Documentation)","title":"Websocket"},{"location":"/libraries/websocket.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-websocket\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-websocket_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-websocket_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/websocket.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/auth.html","text":"","title":"Auth"},{"location":"/libraries/auth.html#auth","text":"Classes to support Play Framework apps with authentication (API Documentation)","title":"Auth"},{"location":"/libraries/auth.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-auth\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-auth_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-auth_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/auth.html#classes","text":"TODO","title":"Classes"},{"location":"/libraries/auth-graphql.html","text":"","title":"Auth/GraphQL"},{"location":"/libraries/auth-graphql.html#auth-graphql","text":"Secure GraphQL controllers and views, including GraphiQL and GraphQL Voyager (API Documentation)","title":"Auth/GraphQL"},{"location":"/libraries/auth-graphql.html#usage","text":"sbt libraryDependencies += \"com.kyleu\" %% \"projectile-lib-auth-graphql\" % \"1.7.0\" Maven <dependency>\n  <groupId>com.kyleu</groupId>\n  <artifactId>projectile-lib-auth-graphql_2.12</artifactId>\n  <version>1.7.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.kyleu', name: 'projectile-lib-auth-graphql_2.12', version: '1.7.0'\n}","title":"Usage"},{"location":"/libraries/auth-graphql.html#classes","text":"TODO","title":"Classes"},{"location":"/tutorial/index.html","text":"","title":"Tutorials"},{"location":"/tutorial/index.html#tutorials","text":"The tutorials exist to help you understand and use Projectile effectively.","title":"Tutorials"},{"location":"/tutorial/index.html#","text":"This tutorial uses a PostgreSQL database to create a web app providing real-time planning poker estimation sessions. You can see the final result at estimate.poker, and view the source here.","title":"estimate.poker"},{"location":"/tutorial/index.html#","text":"This tutorial uses the React TypeScript definitions to generates a Scala.js project.","title":"react"},{"location":"/tutorial/index.html#","text":"This tutorial uses the public Star Wars GraphQL schema and generates Scala clients for hand-written queries.","title":"starwars"},{"location":"/tutorial/index.html#","text":"Once completed, this will be a tutorial on the usage of Thrift code generation.","title":"thrifty"},{"location":"/tutorial/index.html#table-of-contents","text":"estimate.poker Demo site Source code Overview Database schema Hello World Database Setup Configuring Projectile Basic Codegen More Features Web Application Admin Site Scala.js Websocket Planning Poker Wrapping Up react starwars thrifty","title":"Table of contents"},{"location":"/tutorial/poker/index.html","text":"","title":"estimate.poker"},{"location":"/tutorial/poker/index.html#estimate-poker","text":"The estimate.poker tutorial will start with a “Hello World” Scala application, set up a PostgreSQL database, add Projectile, generate more and more features, and finally produce a web application with:\nWebsocket transport of shared Scala classes for real-time client updates Play Framework admin site with UI for data access, search, and mutations Full GraphQL API, with a schema visualizer and query IDE Code generated services to reduce CRUD boilerplate","title":"estimate.poker"},{"location":"/tutorial/poker/index.html#demo-site","text":"You can see the end result of this tutorial at https://estimate.poker","title":"Demo site"},{"location":"/tutorial/poker/index.html#source-code","text":"The source code for this project is available at https://github.com/KyleU/estimate","title":"Source code"},{"location":"/tutorial/poker/index.html#overview","text":"Hello World will help you clone and build an initial Scala sbt project Database Setup guides you though configuring a new postgres database Configuring Projectile configures Projectile and get your first project set up Basic Codegen will create our first generated classes using Projectile More Features adds database queries, services, a GraphQL endpoint Web Application will turn our console-based duckling into a beautiful web swan Admin Site generates a full-feature admin site and GraphQL API Scala.js creates a Scala.js project and shared code cross-compiled to Scala.js Websocket builds a websocket transport for shared messages, Scala.js logic, and a few simple views Planning Poker finally builds on what we’ve created to make a real planning poker app Wrapping Up TODO","title":"Overview"},{"location":"/tutorial/poker/index.html#database-schema","text":"The schema is created by a flyway migration, available here","title":"Database schema"},{"location":"/tutorial/poker/01-hello-world.html","text":"","title":"Hello World"},{"location":"/tutorial/poker/01-hello-world.html#hello-world","text":"This tutorial will lead you through creating a real-time web application that facilitates planning poker sessions.\nThe basic idea is to create a PostgreSQL database, use that to have Projectile generate some code, and then repeat as we add features.\nWith luck, we’ll end up with a useful web application, identical to the version available here","title":"Hello World"},{"location":"/tutorial/poker/01-hello-world.html#clone-the-repo","text":"Projectile goes to great lengths to minimize the amount of boilerplate you need to provide in your codebase, but there’s still a fair bit of ceremony involved in starting a new sbt project. To save us both some typing, go ahead and clone the repository for this tutorial\ngit clone --branch 01-hello-world https://github.com/KyleU/estimate.git\nIf you’ve cloned the Projectile repo prior to following this tutorial, checkout this tutorial step’s branch\ngit checkout --branch 01-hello-world","title":"Clone the repo"},{"location":"/tutorial/poker/01-hello-world.html#run-the-project","text":"From the directory you cloned the project to, run sbt (you’ll need sbt installed, obviously). From the interactive command prompt, you can run tasks like compile and publish.\nIf you run the project, Entrypoint will be called, which print’s the obligatory “Hello World”. You can also run the sbt task by calling projectile, which will print the usage instructions","title":"Run the project"},{"location":"/tutorial/poker/01-hello-world.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/01-hello-world\nSee this branch’s Pull Request for detailed comments on the code\nhttps://github.com/KyleU/estimate/pull/1","title":"Explore the code"},{"location":"/tutorial/poker/01-hello-world.html#next-steps","text":"There’s not much to be impressed by yet, so let’s move on!","title":"Next steps"},{"location":"/tutorial/poker/02-database-setup.html","text":"","title":"Database Setup"},{"location":"/tutorial/poker/02-database-setup.html#database-setup","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker, and have completed the previous tutorial step\nNow that we have a basic project configured, let’s add a database schema for Projectile to use for code generation.\nGo ahead and checkout the 02-database-setup tag by running git checkout 02-database-setup. This adds four files in ./conf/db/migration:\n00_CreateDatabase.sql, containing statements to create the database and user 00_DropAll.sql, which, when run, removes everything created by V1__InitialSchema.sql V1__InitialSchema.sql, describing all of the tables and types needed in the database V2__SeedData.sql, inserting initial test data, so we have something to look at","title":"Database Setup"},{"location":"/tutorial/poker/02-database-setup.html#schema","text":"","title":"Schema"},{"location":"/tutorial/poker/02-database-setup.html#apply-the-ddl","text":"These are Flyway migrations, but we’ll apply them manually for now.\nUsing a tool like psql or Database Flow, run 00_CreateDatabase.sql, or manually create a user and empty database named estimate. Then, run V1__InitialSchema.sql.sql to create the database structure, and V2__SeedData.sql to create the initital data.\nConnect to your database, and run select * from session. If at least one row comes back, you’re in business.","title":"Apply the DDL"},{"location":"/tutorial/poker/02-database-setup.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/02-database-setup\nSee this branch’s Pull Request for detailed comments on the database tables\nhttps://github.com/KyleU/estimate/pull/2","title":"Explore the code"},{"location":"/tutorial/poker/02-database-setup.html#next-steps","text":"Now it’s time to configure Projectile, giving it the configuration it needs to generate some code, so get going!","title":"Next steps"},{"location":"/tutorial/poker/03-configuring-projectile.html","text":"","title":"Configuring Projectile"},{"location":"/tutorial/poker/03-configuring-projectile.html#configuring-projectile","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker, switched to the 02-database-setup branch, and have created a database as described in the previous tutorial step\nNow that we have a working project, let’s get Projectile configured so we can start generating code.\nThere’s a semi-functional command-line interface, but it’s poorly documented, so we’ll use the UI provided by Projectile.\nUsing one of the methods described in Installing Projectile, launch the projectile server, and open http://localhost:20000\nIf all goes well, you should see a screen like this:\nSelect the “Add Input” link, and fill out the form like so:\nOnce you save the connection, you’re brought to the connection details screen. We need to configure the database connection.\nClick “Connection Settings” and fill in the correct url and credentials. If you ran the initial database creation script from step 2, use “estimate” as the database, username, and password. Return to the input detail screen, and click the “Refresh” button. It will hopefully connect to the database and return something looking like this:\nNote that there’s 11 tables and some enums too. Feel free to click around and explore the input definition. When you’re ready, return to the Projectile homepage, where we’ll create a project.\nCreate a new project by clicking the “Add Project” link, and filling out the form thusly:\nNow you’ll be at the main project screen. Get used to it, you’ll be seeing it a lot.\nYou should have four enums and eleven models. We already have two features enabled, “Core” and “DataModel”. When we run the export, those two features will create Scala case classes for all of the project’s enums and tables.","title":"Configuring Projectile"},{"location":"/tutorial/poker/03-configuring-projectile.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/03-configuring-projectile\nSee this branch’s Pull Request for detailed comments on the project and input configuration files\nhttps://github.com/KyleU/estimate/pull/3","title":"Explore the code"},{"location":"/tutorial/poker/03-configuring-projectile.html#next-steps","text":"We’re ready to generate some code, so get going!","title":"Next steps"},{"location":"/tutorial/poker/04-basic-codegen.html","text":"","title":"Basic Codegen"},{"location":"/tutorial/poker/04-basic-codegen.html#basic-codegen","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker and switched to the 03-configuring-projectile branch\nNow that you’ve got Projectile configured, go ahead either run “projectile export” from SBT, or click the big “Export” button in the UI.\nWith luck, you’ll see a screen showing the code that was generated. Return to sbt and compile, it should pick up a few dozen new files.","title":"Basic Codegen"},{"location":"/tutorial/poker/04-basic-codegen.html#schema","text":"As a reminder, this is the schema we’re working with\nLet’s look at what was generated.","title":"Schema"},{"location":"/tutorial/poker/04-basic-codegen.html#enums","text":"For each Postgres type, an Enumeratum StringEnum is generated, mixing in Circe classes for json serialization\nsrc/main/scala/models/SessionStatusType.scala\n/* Generated File */\npackage models\n\nimport enumeratum.values.{StringCirceEnum, StringEnum, StringEnumEntry}\n\nsealed abstract class SessionStatusType(override val value: String) extends StringEnumEntry {\n  override def toString = value\n}\n\nobject SessionStatusType extends StringEnum[SessionStatusType] with StringCirceEnum[SessionStatusType] {\n  case object Creating extends SessionStatusType(\"Creating\")\n  case object Active extends SessionStatusType(\"Active\")\n  case object Complete extends SessionStatusType(\"Complete\")\n\n  override val values = findValues\n}","title":"Enums"},{"location":"/tutorial/poker/04-basic-codegen.html#models","text":"For each Postgres table and view, a Scala case class is generated, with a companion object containing Circe json serialization and a helper factory method\nNote that the field status is correctly typed to an enum, and Java uuids and dates are correctly handled. This is accomplished with a few classes from projectile-lib-core, which is cross-compiled to the JVM and JavaScript (we’ll see why later)\nsrc/main/scala/models/SessionRow.scala\n/* Generated File */\npackage models\n\nimport com.kyleu.projectile.util.DateUtils\nimport com.kyleu.projectile.util.JsonSerializers._\nimport io.circe.Json\nimport java.time.LocalDateTime\nimport java.util.UUID\n\nobject SessionRow {\n  implicit val jsonEncoder: Encoder[SessionRow] = deriveEncoder\n  implicit val jsonDecoder: Decoder[SessionRow] = deriveDecoder\n\n  def empty(\n    id: UUID = UUID.randomUUID,\n    title: String = \"\",\n    slug: String = \"\",\n    choices: List[String] = List.empty,\n    options: Json = Json.obj(),\n    status: SessionStatusType = SessionStatusType.Creating,\n    created: LocalDateTime = DateUtils.now,\n    completed: Option[LocalDateTime] = None\n  ) = {\n    SessionRow(id, title, slug, choices, options, status, created, completed)\n  }\n}\n\nfinal case class SessionRow(\n    id: UUID,\n    title: String,\n    slug: String,\n    choices: List[String],\n    options: Json,\n    status: SessionStatusType,\n    created: LocalDateTime,\n    completed: Option[LocalDateTime]\n)","title":"Models"},{"location":"/tutorial/poker/04-basic-codegen.html#use-what-youve-built","text":"Let’s modify Entrypoint to create a new session and serialize it to json, just because we can\nimport com.kyleu.projectile.util.JsonSerializers._\nimport models.SessionRow\n\nobject Entrypoint {\n  def main(args: Array[String]): Unit = {\n    val session = SessionRow.empty(title = \"Hello!\")\n    println(session.asJson.spaces2)\n  }\n}\nYep, that worked\nsbt:estimate.poker> run\n[info] Running Entrypoint\n{\n  \"id\" : \"baab15da-a971-425d-b25b-4fd02746798c\",\n  \"title\" : \"Hello!\",\n  \"slug\" : \"\",\n  \"choices\" : [\n  ],\n  \"options\" : {\n\n  },\n  \"status\" : \"Creating\",\n  \"created\" : \"2019-02-22T17:52:43.154545\",\n  \"completed\" : null\n}\n[success] Total time: 1s","title":"Use what you’ve built"},{"location":"/tutorial/poker/04-basic-codegen.html#organizing-the-output","text":"Disclaimer This next part is very boring. We’re going to be entering package names for each of the enums and models. Feel free to reset your repo and switch to the 04-basic-codegen branch, where this is already done, then move on to the next step\nCurrently, all of our classes are being generated in a single package. This is probably fine for our tiny application, but we can clean it up by assigning packages to the exported models and enums. Head back to the project detail page\nClick the “Bulk Edit” link at the top of the enums. You’ll need to add package names, making it look like this\nThen head back click the “Bulk Edit” link at the top of the models. More package names, make it look like this\nClick “Export” again, and it will create the same case classes, but all organized now. However, it left the old files behind, so select “Audit” to detect the orphaned files, then “Fix All”.","title":"Organizing the output"},{"location":"/tutorial/poker/04-basic-codegen.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/04-basic-codegen\nSee this branch’s Pull Request for detailed comments on the generated files\nhttps://github.com/KyleU/estimate/pull/4","title":"Explore the code"},{"location":"/tutorial/poker/04-basic-codegen.html#next-steps","text":"Case classes are cool and all, but we’re here to interact with a database, so let’s add more features!","title":"Next steps"},{"location":"/tutorial/poker/05-more-features.html","text":"","title":"More Features"},{"location":"/tutorial/poker/05-more-features.html#more-features","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker and switched to the 04-basic-codegen branch\nCase classes are cool and all, but we’re here to interact with a database, so let’s add more features! We’ll be adding generated JDBC queries and asynchronous services.\nTo start, we’ll need to add new supporting libraries. Open up build.sbt and change the libraryDependencies line to:\nlibraryDependencies ++= Seq(\"service\", \"graphql\", \"slick\").map(x => \"com.kyleu\" %% s\"projectile-lib-$x\" % \"1.3.0\")\nThis will add projectile-lib-service, projectile-lib-graphql, and projectile-lib-slick to our build.\nNow return to the project detail page, and select “Edit Features”. To match the libraries we included, let’s enable features “Service”, “GraphQL”, and “Slick”.\nNow that those are added, export the project again by either clicking the “Export” button of the project detail page, or running “projectile export” from sbt. Go ahead and compile your project again. Assuming it succeeded (remember to restart sbt after you change the libraryDependencies), you’ve now got a project with full database functionality and slick bindings!","title":"More Features"},{"location":"/tutorial/poker/05-more-features.html#generated-queries","text":"To work with the database tables and views, strongly-typed database queries for searching and common CRUD operations were generated. See here for an example of what was generated for Session","title":"Generated Queries"},{"location":"/tutorial/poker/05-more-features.html#generated-services","text":"Basic asynchronous services exposing all of the queries were generated. See here for an example of what was generated for Session","title":"Generated Services"},{"location":"/tutorial/poker/05-more-features.html#generated-slick-bindings","text":"If you like functional database interactions, you’ll love the Slick bindings that were generated. See here for an example of what was generated for Session","title":"Generated Slick Bindings"},{"location":"/tutorial/poker/05-more-features.html#use-what-youve-built","text":"Let’s modify Entrypoint to open the database, insert a new Session, and retrieve it, serializing to json. Before we do, we’ll have to add this file to src/main/resources/application.conf. There’s a lot to unpack here, see the library documentation for more details of database and slick usage\nimport java.util.UUID\n\nimport com.kyleu.projectile.services.database.ApplicationDatabase\nimport com.kyleu.projectile.services.database.slick.ApplicationSlick\nimport com.kyleu.projectile.services.database.slick.SlickQueryService.imports._\nimport com.kyleu.projectile.util.JsonSerializers._\nimport com.kyleu.projectile.util.tracing.{TraceData, TracingService}\nimport com.typesafe.config.ConfigFactory\nimport models.queries.session.SessionRowQueries\nimport models.session.{SessionRow, SessionStatusType}\nimport models.table.session.SessionRowTable\n\nimport scala.concurrent.Await\nimport scala.concurrent.duration._\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nobject Entrypoint {\n  def main(args: Array[String]): Unit = {\n    val cfg = ConfigFactory.load()\n    implicit val td: TraceData = TraceData.noop\n\n    ApplicationDatabase.open(cfg, TracingService.noop)\n    ApplicationSlick.open(TracingService.noop)\n\n    val id = UUID.randomUUID\n    val title = scala.util.Random.alphanumeric.take(8).mkString\n    val newSession = SessionRow.empty(id = id, title = title, slug = title.toLowerCase, status = SessionStatusType.Active)\n\n    val future = ApplicationDatabase.executeF(SessionRowQueries.insert(newSession)).flatMap { _ =>\n      ApplicationSlick.slick.run(\"getSession\")(SessionRowTable.query.filter(_.id === id).result.head)\n    }\n\n    val session = Await.result(future, 10.seconds)\n    println(session.asJson.spaces2)\n  }\n}\nYep, that worked\nsbt:estimate.poker> run\n[info] Running Entrypoint\n{\n  \"id\" : \"ceb7e9f2-03d7-4b72-95e2-d1ec9fbcbfa9\",\n  \"title\" : \"gdCvAi7n\",\n  \"slug\" : \"gdcvai7n\",\n  \"choices\" : [\n  ],\n  \"options\" : {\n\n  },\n  \"status\" : \"Active\",\n  \"created\" : \"2019-02-23T11:44:03.577966\",\n  \"completed\" : null\n}\n[success] Total time: 1s\nIt doesn’t look like much, but Entrypoint now opens a database and Slick context, inserts a new session with JDBC, then uses Slick to retrieve the newly-inserted row and print the json representation. We also generated dependency-injected services and a GraphQL schema, but those will have to until after the next step, where we configure a Play Framework web application","title":"Use what you’ve built"},{"location":"/tutorial/poker/05-more-features.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/05-more-features\nSee this branch’s Pull Request for detailed comments on the modified files\nhttps://github.com/KyleU/estimate/pull/5","title":"Explore the code"},{"location":"/tutorial/poker/05-more-features.html#next-steps","text":"A console app isn’t that impressive, so let’s make a web application!","title":"Next steps"},{"location":"/tutorial/poker/06-web-application.html","text":"","title":"Web Application"},{"location":"/tutorial/poker/06-web-application.html#web-application","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker and switched to the 05-more-features branch\nSo we currently have a pretty great little console app that lets us work with the database, but a Play Framework web application would be even cooler","title":"Web Application"},{"location":"/tutorial/poker/06-web-application.html#scala-build-definition","text":"Now is as good a time as any to move from .sbt files to a Scala build. First let’s add the Play plugin and a few others:\nChange your project/plugins.sbt to match this\nNow, create three new files in /project:\nproject/Common.scala project/Dependencies.scala project/Server.scala\nAnd, finally, change your build.sbt to match this single line","title":"Scala build definition"},{"location":"/tutorial/poker/06-web-application.html#housekeeping","text":"Disclaimer This next part is very boring. We’re going to switch Projectile’s configuration to a Play app, regenerate the files, and audit to clean up the old stuff. If you want to skip this section, checkout the git tag 06-web-application-housekeeping, where these steps have already been performed.\nPlay Framework projects use app for the source root. We’ve been using src/main/scala up to this point, so we’ll need to change Projectile to expect a Play app’s setup. Open the project details page, and select “Edit Summary”.\nChange the template from “Scala Library” to “Play Framework”, and save changes. Now the directories are set up correctly, but our old files still exist.\nExport the project, then audit and fix all to remove the old files. You’ll also need to move application.conf to /conf, and you may as well delete Entrypoint\nCompile, and you should be able to run in sbt to start the server (though it’ll only throw 404s for now)","title":"Housekeeping"},{"location":"/tutorial/poker/06-web-application.html#configuration","text":"Disclaimer This next part is very boring. We’re going to add a Play controller, routes file, and Twirl template. If you want to skip this section, checkout the git branch 06-web-application, where these steps have already been performed.\nNow that we’ve converted to Play, we’ll need to configure some stuff before we can use the Projectile web libraries.\nconf/application.conf can slim down:\nprojectName = \"estimate\"\nsecretKey = \"change_this_secret_key\"\n\ninclude \"projectile-auth.conf\"\n\nplay {\n  modules.enabled += \"models.ProjectileModule\"\n  server.http.port = 24000\n}\nThen add the following files:\napp/assets/stylesheets/main.less: Basic styles for our app app/controllers/HomeController.scala: A Play Framework controller supporting authentication app/models/ProjectileModule.scala: A Guice module that injects a few classes needed by projectile-lib-auth app/util/Config.scala: A simple class to track our project info app/views/index.scala.html: A basic home page, using the base template from projectile-lib-auth conf/routes: This wires up the authentication routes and HomeController’s lone action","title":"Configuration"},{"location":"/tutorial/poker/06-web-application.html#success-","text":"If we’ve got everything set up correctly, we should have a web application with authentication and a Material Design theme.\nYou can sign up for a local account using the menu in the upper right. The “admin” link is broken right now, that’s what we’ll fix next","title":"Success!"},{"location":"/tutorial/poker/06-web-application.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/06-web-application\nSee this branch’s Pull Request for detailed comments on the modified files\nhttps://github.com/KyleU/estimate/pull/6","title":"Explore the code"},{"location":"/tutorial/poker/06-web-application.html#next-steps","text":"Now that we’ve got a web application, let’s generate an admin site with a rich UI and performant GraphQL API. Ready when you are!","title":"Next steps"},{"location":"/tutorial/poker/07-admin-site.html","text":"","title":"Admin Site"},{"location":"/tutorial/poker/07-admin-site.html#admin-site","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker and switched to the 06-web-application branch\nIn this step, we’ll be creating an admin site, with a clean UI and performant GraphQL API\nWe’re going to be adding support for Play controllers/routes/views, so a few new files are needed in the project\nDisclaimer This next part is very boring. We’re going to add a bunch of new files that projectile-lib-auth expects to be available. If you want to skip this section, checkout the git branch 07-admin-site, where these steps have already been performed.","title":"Admin Site"},{"location":"/tutorial/poker/07-admin-site.html#injected-files","text":"Some files, like routes or icons, are injected by Projectile, adding references to other generated code. They all work in special comment sessions, see the source for details\napp/controllers/admin/system/SearchController.scala: Handles the admin search pages app/models/graphql/Schema.scala: Our main Sangria GraphQL schema app/models/template/Icons.scala: Font Awesome icons for our models app/util/web/ModelBindables.scala: Play Framework routes/query bindables for our enums app/views/admin/explore/explore.scala.html: Twirl template for the admin explore section conf/system.routes: Routes for the admin site","title":"Injected files"},{"location":"/tutorial/poker/07-admin-site.html#notes-support","text":"With our notes table, we can support arbitrary notes against any of our tables. We’ll need to add the following files:\napp/controllers/admin/projectile/ModelNoteController.scala: Controller routes to view notes app/models/queries/note/ModelNoteQueries.scala: JDBC queries to retrieve, search, and insert notes app/services/note/ModelNoteService.scala: Asynchronous service that retrieves notes for associated models app/views/admin/note/modelNoteList.scala.html: Twirl view for showing a list of notes app/views/admin/note/notes.scala.html: Twirl view for showing associated notes conf/projectile.routes: Routes for note lookups","title":"Notes support"},{"location":"/tutorial/poker/07-admin-site.html#more-new-files","text":"These are utility files for logging and testing, along with a controller and a few views\napp/controllers/admin/system/AdminController.scala: Handles the admin index and explore pages app/views/admin/layout/menu.scala.html: Twirl template for the admin navbar menu app/views/components/includeScalaJs.scala.html: An empty template for now, it’s used by generated code conf/projectile.routes: Routes for n conf/application.test.conf: Typesafe config for tests conf/logback.xml: Logback configuration conf/logback-test.xml: Logback configuration for tests","title":"More new files"},{"location":"/tutorial/poker/07-admin-site.html#a-few-tweaks","text":"Projectile expects several classes to be available for injection now. Update the following file:\napp/models/ProjectileModule.scala: adds NoteService, GraphQLSchema, and the admin menu conf/routes: Wires projectile.routes, system.routes, and graphql.routes","title":"A few tweaks"},{"location":"/tutorial/poker/07-admin-site.html#exporting-new-features","text":"Head back to the project detail page in the Projectile UI and add the “Controller”, and “Notes” features.\nGenerate the new code by hitting “Export”, and you’re in business.","title":"Exporting new features"},{"location":"/tutorial/poker/07-admin-site.html#the-result","text":"If all went well (or you checked out the 07-admin-site branch), you’ve now got a full admin site. See database codegen for a tour of the features.\nThere’s a full GraphQL API as well (some sample queries are available in conf/graphql/explore)\nAnd it includes the GraphiQL IDE and GraphQL Voyager schema visualization","title":"The result"},{"location":"/tutorial/poker/07-admin-site.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/07-admin-site\nSee this branch’s Pull Request for detailed comments on the generated files\nhttps://github.com/KyleU/estimate/pull/7","title":"Explore the code"},{"location":"/tutorial/poker/07-admin-site.html#next-steps","text":"Ok, we’ve got an admin site, user logins, a GraphQL API, and more. To get a real-time application going, we need client support. Let’s add Scala.js!","title":"Next steps"},{"location":"/tutorial/poker/08-scala-js.html","text":"","title":"Scala.js"},{"location":"/tutorial/poker/08-scala-js.html#scala-js","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker and switched to the 07-admin-site branch\nIt sure would be nice if we could use the same models from our database in the client. Luckily, Scala.js was built to solve this exact problem! We’ll be adding a client project, as well as a shared project for, well, shared code.","title":"Scala.js"},{"location":"/tutorial/poker/08-scala-js.html#shared-project-structure","text":"To start, let’s add the following two files to /project:\nproject/Shared.scala\nobject Shared {\n  lazy val shared = (crossProject(JSPlatform, JVMPlatform).withoutSuffixFor(JVMPlatform).crossType(CrossType.Pure) in file(\"shared\")).settings(\n    libraryDependencies += \"com.kyleu\" %%% \"projectile-lib-core\" % Dependencies.Projectile.version,\n    (sourceGenerators in Compile) += ProjectVersion.writeConfig(Common.projectId, Common.projectName, Common.projectPort).taskValue\n  ).settings(Common.commonSettings: _*)\n\n  lazy val sharedJs = shared.js\n  lazy val sharedJvm = shared.jvm\n}\nproject/Client.scala\nobject Client {\n  private[this] val clientSettings = Common.commonSettings ++ Seq(\n    libraryDependencies ++= Seq(\"com.kyleu\" %%% \"projectile-lib-scalajs\" % Dependencies.Projectile.version)\n  )\n\n  lazy val client = (project in file(\"client\")).settings(clientSettings: _*).enablePlugins(ScalaJSPlugin, ScalaJSWeb).dependsOn(Shared.sharedJs)\n}\nWe’ll need to change the definition of Server to include our new client project:\nproject/Server.scala\n...\n    // Scala.js\n    scalaJSProjects := Seq(Client.client),\n\n    // Sbt-Web\n    JsEngineKeys.engineType := JsEngineKeys.EngineType.Node,\n    pipelineStages in Assets := Seq(scalaJSPipeline),\n    pipelineStages ++= Seq(gzip),\n    ...\nAnd, since we’ve got two new projects (three, if you count sharedJs and sharedJvm separately), add them to build.sbt:\nlazy val sharedJvm = Shared.sharedJvm\nlazy val sharedJs = Shared.sharedJs\nlazy val client = Client.client\nlazy val `estimate-poker` = Server.`estimate-poker`","title":"Shared project structure"},{"location":"/tutorial/poker/08-scala-js.html#moving-generated-files","text":"The generated models are still in the server project, so we’ll need to move them to shared. Projectile has support for this, just edit your project (the “Edit Summary” link on the detail page), and change the template from “Play Framework” to “Scala.js”.\nExport your project again, and it will store the generated models in shared/src/main/scala. To remove the now-unreferenced files from the server project, simply “Audit” your project, and “fix all” the orphaned files","title":"Moving generated files"},{"location":"/tutorial/poker/08-scala-js.html#use-what-youve-built","text":"Restart sbt, and your admin site should now include JavaScript enhancements like form editors and autocomnplete. See the docs on projectile-lib-core and projectile-lib-scalajs for more details on the new libraries we’re using.","title":"Use what you’ve built"},{"location":"/tutorial/poker/08-scala-js.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/08-scala-js\nSee this branch’s Pull Request for detailed comments on the modified files\nhttps://github.com/KyleU/estimate/pull/8","title":"Explore the code"},{"location":"/tutorial/poker/08-scala-js.html#next-steps","text":"Now that we’ve (finally) got a full-featured web application using classes shared between the JVM and JavaScript, it’s time to wire up websocket communitation! Come on, let’s go!","title":"Next steps"},{"location":"/tutorial/poker/09-websocket.html","text":"","title":"Websocket"},{"location":"/tutorial/poker/09-websocket.html#websocket","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker and switched to the 08-scala-js branch","title":"Websocket"},{"location":"/tutorial/poker/09-websocket.html#websocket-library","text":"Edit Server.scala, and change it to depend on projectile-lib-websocket:\nproject/Dependencies.scala:\nval all = Seq(\"websocket\", \"slick\").map(s => \"com.kyleu\" %% s\"projectile-lib-$s\" % version)","title":"Websocket Library"},{"location":"/tutorial/poker/09-websocket.html#network-messages","text":"Like most real-time web applications, we’ll be using a websocket, passing JSON or binary serialized data bi-directionally. These files contain our message definitions. They’ll grow as we add more functionality\nshared/src/main/scala/models/message/ClientMessage.scala shared/src/main/scala/models/message/ServerMessage.scala","title":"Network messages"},{"location":"/tutorial/poker/09-websocket.html#participant-models","text":"We need each unique visitor to have an identifier, so we use the files that were generated by Projectile for the participant table. This file generates a participant based on an http request\napp/util/web/ParticipantHelper.scala","title":"Participant models"},{"location":"/tutorial/poker/09-websocket.html#actor-service","text":"Out clients need to connect to something, so this file extends ConnectionService and handles the messages we defined earlier\napp/services/session/actor/ParticipantConnectionService.scala\nWe also need to wire up an actor supervisor, so add the following lines to ProjectileModule.scala:\n@Provides @javax.inject.Singleton @Named(\"connection-supervisor\")\ndef provideConnectionSupervisor(actorSystem: ActorSystem): ActorRef = {\n  actorSystem.actorOf(ConnectionSupervisor.props(err = WebsocketController.errJson), \"connections\")\n}","title":"Actor service"},{"location":"/tutorial/poker/09-websocket.html#scala-js-connection","text":"We need a client-side websocket connection, so we’ll make ConnectionService, and a JS entrypoint\nclient/src/main/scala/ConnectionService.scala client/src/main/scala/Entrypoint.scala","title":"Scala.js connection"},{"location":"/tutorial/poker/09-websocket.html#controllers-routes-and-views","text":"Let’s add a controller that defines a new /test action and extends WebsocketController to connect with our service.\napp/controllers/ConnectionController.scala\nNow we need a view for our new action, so here it is. Note that it includes our ScalaJS project client.\napp/views/connect.scala.html\nAnd finally, we’ll add new routes for our new actions:\nGET         /test                                    controllers.ConnectionController.test()\nGET         /connect                                 controllers.ConnectionController.connect(binary: Boolean ?= false)","title":"Controllers, routes, and views"},{"location":"/tutorial/poker/09-websocket.html#putting-it-all-together","text":"If you followed along (or just checked out this branch), you should have a working application the connects via a websocket and sends pings every few seconds. Exciting!\nhttp://localhost:24000/test","title":"Putting it all together"},{"location":"/tutorial/poker/09-websocket.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/09-websocket\nSee this branch’s Pull Request for detailed comments on the generated files\nhttps://github.com/KyleU/estimate/pull/9","title":"Explore the code"},{"location":"/tutorial/poker/09-websocket.html#next-steps","text":"Ok, we’re all wired up - let’s finish this thing and build a real app!","title":"Next steps"},{"location":"/tutorial/poker/10-planning-poker.html","text":"","title":"Planning Poker"},{"location":"/tutorial/poker/10-planning-poker.html#planning-poker","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker and switched to the 09-websocket branch\nWow, finally we get around to building an actual useful application. After the last step, we’ve got a web application that connects via Websocket, and passes ping messages. Now we’ll extend that application to support planning poker sessions.","title":"Planning Poker"},{"location":"/tutorial/poker/10-planning-poker.html#sessioncontext","text":"Since we’re lazy, let’s create a shared SessionContext object that hold sets of members, polls, and votes. These match our database model, and uses the classes generated by Projectile. This class will be used on the JVM as well as in JavaScript\nshared/src/main/scala/models/session/context/SessionContext.scala\nLet’s also create a listener, that registers callbacks and reacts to change in the SessionContext\nshared/src/main/scala/models/session/context/SessionContextListener.scala","title":"SessionContext"},{"location":"/tutorial/poker/10-planning-poker.html#protocol","text":"We’ll extend our messages files to define our protocol, mainly just add/edit/remove messages and updates from the server\nshared/src/main/scala/models/message/ClientMessage.scala shared/src/main/scala/models/message/ServerMessage.scala","title":"Protocol"},{"location":"/tutorial/poker/10-planning-poker.html#sessionmanager","text":"","title":"SessionManager"},{"location":"/tutorial/poker/10-planning-poker.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/10-planning-poker\nSee this branch’s Pull Request for detailed comments on the generated files\nhttps://github.com/KyleU/estimate/pull/10","title":"Explore the code"},{"location":"/tutorial/poker/10-planning-poker.html#next-steps","text":"We’re done!","title":"Next steps"},{"location":"/tutorial/poker/11-wrapping-up.html","text":"","title":"Wrapping Up"},{"location":"/tutorial/poker/11-wrapping-up.html#wrapping-up","text":"Prerequisites This page assumes you have checked out a local copy of estimate.poker and switched to the 10-planning-poker branch\nTODO: Coming Soon","title":"Wrapping Up"},{"location":"/tutorial/poker/11-wrapping-up.html#explore-the-code","text":"https://github.com/KyleU/estimate/tree/11-wrapping-up\nSee this branch’s Pull Request for detailed comments on the generated files\nhttps://github.com/KyleU/estimate/pull/11","title":"Explore the code"},{"location":"/tutorial/poker/11-wrapping-up.html#next-steps","text":"TODO","title":"Next steps"},{"location":"/tutorial/react/index.html","text":"","title":"react"},{"location":"/tutorial/react/index.html#react","text":"This tutorial uses the React TypeScript definitions to generates a Scala.js project.\nTODO","title":"react"},{"location":"/tutorial/starwars/index.html","text":"","title":"starwars"},{"location":"/tutorial/starwars/index.html#starwars","text":"This tutorial uses the public Star Wars GraphQL schema and generates Scala clients for hand-written queries.\nTODO","title":"starwars"},{"location":"/tutorial/thrifty/index.html","text":"","title":"thrifty"},{"location":"/tutorial/thrifty/index.html#thrifty","text":"Once completed, this will be a tutorial on the usage of Thrift code generation.\nTODO","title":"thrifty"},{"location":"/cookbook/index.html","text":"","title":"Cookbook"},{"location":"/cookbook/index.html#cookbook","text":"","title":"Cookbook"},{"location":"/cookbook/index.html#table-of-contents","text":"Add Database Types Remove Unused Files Troubleshooting","title":"Table of contents"},{"location":"/cookbook/add.html","text":"","title":"Add Database Types"},{"location":"/cookbook/add.html#add-database-types","text":"TODO","title":"Add Database Types"},{"location":"/cookbook/remove.html","text":"","title":"Remove Unused Files"},{"location":"/cookbook/remove.html#remove-unused-files","text":"TODO","title":"Remove Unused Files"},{"location":"/cookbook/troubleshooting.html","text":"","title":"Troubleshooting"},{"location":"/cookbook/troubleshooting.html#troubleshooting","text":"For now, hit GitHub Issues, we’re eager to help!","title":"Troubleshooting"},{"location":"/technology.html","text":"","title":"Technology"},{"location":"/technology.html#technology","text":"Projectile relies on a whole lot of tremendous open source projects. Here’s a few of them.\nScala Play Framework Akka Sangria Materialize CSS Enumeratum circe Font Awesome JQuery Slick Doobie OpenAPI","title":"Technology"}]}